<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Data Validator" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDV project
    and works with the common_build.xml file.
  </description>

   <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />


  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor-pkg.xml"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

  <!--
    <target name='dist-solution'>
      <copy todir="${solution.stage.dir}" overwrite='true'>
        <fileset dir='solution'>
        <include name=''>
      </copy>
    </target>
  -->
  <!-- Global porperties -->
  <property name="pentaho-base.dir"         value="../cdv-pentaho-base"       description="Name of pentaho base dir"/>
  <property name="core.dir"                 value="../cdv-core"               description="Name of core dir"/>
  <property name="plugin.name"              value="cdv"                       description="Name of the plugin"/>
  <property name="resource.dir"             value="resources"                 description="Name of the resource directory"/>
  <property name="stage.dir"                value="${bin.dir}/stage"          description="Name of the resource directory"/>
  <property name="samples.stage.dir"        value="${bin.dir}/stage-samples"  description="Name of the resource directory" />
  <property name="runtimelib.dir"           value="${basedir}/runtime-lib"    description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />

  <!-- Resources location -->
  <property name="core-resource.dir"        value="${core.dir}/${resource.dir}"/>
  <!-- Extra Source Dir Locations -->
  <property name="pentaho-base-src.dir"     value="${pentaho-base.dir}/src"/>

  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
        <fileset dir="runtime-lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <src path="${src.dir}"/>
      <src path="${pentaho-base-src.dir}"/>
    </javac>
  </target>

  <tstamp/>

  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>

  <echo>distribution.version = ${distribution.version}</echo>

  <target name="dist" depends="clean,resolve,jar,dist-plugin,dist-samples"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>


  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <target name="assemble" depends="assemble.init,install-antcontrib, dist-plugin"/>

  <target name="dist-plugin" depends="jar" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>
  <fileset dir="runtime-lib">
        <include name="**/*.jar"/>
        <exclude name="**/batik-js-1.7.jar"/>
      </fileset>
    </copy>


    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${core-resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <antcall target="replace-dashboards-path"/>
    <antcall target="replace-sampleFiles-path"/>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create the version file -->
	<tstamp/>			
	<property name="sequential.build.id" value="manual-${DSTAMP}"/>


	<echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='${project.stage}' buildId='${sequential.build.id}'>${distribution.version}&lt;/version>"/>		       


    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="${plugin.name}/**/*"
         excludes="**/Thumbs.db"/>



    <echo file="${dist.dir}/marketplace.xml">      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${distribution.version}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url.4.8}
        &lt;/package_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version.4.8}&lt;/min_parent_version&gt;
        &lt;max_parent_version&gt;${marketplace.metadata.max_parent_version.4.8}&lt;/max_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;</echo>

    <copy tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>


  </target>

  <!--=======================================================================
              dist-samples

              Creates a distribution of this project's samples
              ====================================================================-->
  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the cdf-samples folder -->
    <copy todir="${samples.stage.dir}/plugin-samples" overwrite="true" >
      <fileset dir="plugin-samples"></fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}/plugin-samples/"
         includes="**/*"
         excludes="**/Thumbs.db"
        />
  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin,dist-samples" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy samples -->
    <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
      <fileset dir="${samples.stage.dir}/plugin-samples/">
        <include name="**/*" />
      </fileset>
    </copy>

    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

  </target>

  <!--=======================================================================
          publish-pentaho-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
  <target name="publish-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <ant antfile="../build-res/subfloor.xml" target="publish-nojar"/>

    <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>

    <replace file="plugin-pom.xml" token="jar" value="zip"/>
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
    
  
    <if>
		<available file="${dist.dir}/${plugin.zipfile}" />
		<then>    
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
    </antcall>
    	</then>
    </if>
    
    
    <if>
		<available file="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" />
		<then>
    		<antcall target="maven-publish-artifact">
	      		<param name="publish.pomFile" value="plugin-pom.xml"/>
      			<param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip"/>
    		</antcall>
    	</then>
    </if>

    <if>
      <available file="${dist.dir}/${plugin.samples.zipfile}" />
      <then>
        <replace file="samples-pom.xml" token="jar" value="zip"/>
        <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>
        <antcall target="maven-publish-artifact">
          <param name="publish.pomFile" value="samples-pom.xml"/>
          <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
        </antcall>
      </then>
    </if>
    <if>
      <available file="${dist.dir}/${plugin.solution.zipfile}" />
      <then>
        <replace file="solution-pom.xml" token="jar" value="zip"/>
        <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution"/>
        <antcall target="maven-publish-artifact">
          <param name="publish.pomFile" value="solution-pom.xml"/>
          <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}"/>
        </antcall>
      </then>
    </if>
  </target>

  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="clean-jars">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
    <delete dir="${runtimelib.dir}" />
  </target>

  <target name='replace-dashboards-path'>
    <!-- Replacing dashboards paths-->
    <replace file="${stage.dir}/${plugin.name}/presentation/home.cdfde"                   token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/validations.cdfde"            token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/alerts.cdfde"                 token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/cdaErrors.cdfde"              token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/slowQueries.cdfde"            token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/cdvAbout.cdfde"               token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/cdvAbout.cdfde"               token="/pentaho/plugin/cdv/api/checkVersion"  value="/pentaho/content/cdv/checkVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/notificationSettings.cdfde"   token="/pentaho/plugin/cdv/api/getVersion"    value="/pentaho/content/cdv/getVersion" />
    <replace file="${stage.dir}/${plugin.name}/presentation/notificationSettings.cdfde"   token="/public/cdv/notifications.xml"         value="/cdv/notifications.xml" />
  </target>

  <target name='replace-sampleFiles-path'>
    <!-- Replacing sampleFiles paths-->
    <replace file="${stage.dir}/${plugin.name}/sampleFiles/test.cdv"    token="/public/plugin-samples/cda/cdafiles/sql-jndi.cda"         value="/plugin-samples/cda/cdafiles/sql-jndi.cda" />
    <replace file="${stage.dir}/${plugin.name}/sampleFiles/test.cdv"    token="/public/cdv/tests/test.cdv"                               value="/cdv/tests/test.cdv" />

    <replace file="${stage.dir}/${plugin.name}/sampleFiles/test2.cdv"   token="/public/plugin-samples/cda/cdafiles/mondrian-jndi.cda"    value="/plugin-samples/cda/cdafiles/mondrian-jndi.cda" />
    <replace file="${stage.dir}/${plugin.name}/sampleFiles/test2.cdv"   token="/public/cdv/tests/test2.cdv"                              value="/cdv/tests/test2.cdv" />
  </target>
</project>
